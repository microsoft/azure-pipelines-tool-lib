# Release pipeline for azure-pipelines-tool-lib
# This pipeline publishes to npm with a two-stage process:
# Stage 1: Publish as prerelease (automated)
# Stage 2: Promote to latest (manual approval required)
#
# REGISTRY CONFIGURATION:
# - Currently configured for Azure Artifacts private registry
# - To switch to public npm: change registry URL to https://registry.npmjs.org/
# - Requires 'tool-lib-npm-tokens' variable group with 'npm-automation.token'
# - For Azure Artifacts: token should have packaging read/write permissions
# - For public npm: token should be from npmjs.com with publish permissions
#
# AUTHENTICATION PATTERN:
# - Creates .npmrc with registry, always-auth, and auth token (matches working Node.js script)
# - Uses environment variables to securely pass the token
# - All npm commands use --registry flag for explicit registry targeting

trigger: none  # Manual trigger only

variables:
- group: tool-lib-npm-tokens

resources:
  repositories:
  - repository: 1ESPipelineTemplates
    type: git
    name: 1ESPipelineTemplates/1ESPipelineTemplates
    ref: refs/tags/release

extends:
  template: v1/1ES.Official.PipelineTemplate.yml@1ESPipelineTemplates
  parameters:
    featureFlags:
      autoBaseline: false
    sdl:
      baseline:
        baselineSet: default
        baselineFile: $(Build.SourcesDirectory)/.gdn/.gdnbaselines
      sourceAnalysisPool:
        name: 1ES-ABTT-Shared-Pool
        image: abtt-windows-2022
        os: windows
    customBuildTags:
    - ES365AIMigrationTooling-Release
    
    stages:
    # ================================
    # STAGE 1: BUILD & PRERELEASE PUBLISHING (AUTOMATED)
    # ================================
    - stage: Build
      displayName: Build and Prerelease
      jobs:
      - job: build
        displayName: Build and Publish Prerelease
        pool:
          name: 1ES-ABTT-Shared-Pool
          image: abtt-windows-2022
          os: windows
        templateContext:
          outputs:
          - output: pipelineArtifact
            displayName: 'Publish azure-pipelines-tool-lib package to pipeline artifacts'
            targetPath: '$(Build.ArtifactStagingDirectory)'
            artifactType: 'pipeline'
            artifactName: 'azure-pipelines-tool-lib-package'
        steps:
        - template: /.azure-pipelines/common-steps.yml@self
          parameters:
            includePackaging: 'true'
        
        # Conditional publishing - only from master branch
        - ${{ if eq(variables['build.reason'], 'Manual') }}:
          # - script: |
          #     echo '//registry.npmjs.org/:_authToken=$(npm-automation.token)' > .npmrc
          #     npm publish --ignore-scripts --tag prerelease
          #     rm .npmrc
          #   displayName: 'Publish to npm as prerelease'
          #   # condition: eq(variables['Build.SourceBranchName'], 'master')
          #   continueOnError: true
          
          - script: |
              echo "Setting up npm authentication for private registry..."
              set NPM_TOKEN=$(npm-automation.token)
              echo registry=https://pkgs.dev.azure.com/dassayantan/dassayantan/_packaging/TestPackages/npm/registry/ > .npmrc
              echo always-auth=true >> .npmrc
              echo //pkgs.dev.azure.com/dassayantan/dassayantan/_packaging/TestPackages/npm/registry/:_authToken=%NPM_TOKEN% >> .npmrc
              echo "Publishing to private registry..."
              npm publish --registry https://pkgs.dev.azure.com/dassayantan/dassayantan/_packaging/TestPackages/npm/registry/ --ignore-scripts --tag prerelease
              del .npmrc
            displayName: 'Publish to Azure Artifacts as prerelease'
            env:
              NPM_TOKEN: $(npm-automation.token)
            continueOnError: true

          - script: |
              echo "Current working directory:"
              pwd
              echo "npm config list:"
              npm config list
              echo "Contents of .npmrc (if exists):"
              if exist .npmrc (type .npmrc) else (echo .npmrc does not exist)
            displayName: 'Debug npm configuration'

          - pwsh: |
              if ($LASTEXITCODE -ne 0) {
                  Write-Host "##vso[task.logissue type=warning]Publishing azure-pipelines-tool-lib was unsuccessful"
                  Write-Host "##vso[task.complete result=SucceededWithIssues;]"
              } else {
                  Write-Host "Successfully published as prerelease"
              }
            displayName: 'Check publish status'
            # condition: eq(variables['Build.SourceBranchName'], 'master')

    # ================================
    # STAGE 2: RELEASE TO LATEST (MANUAL APPROVAL REQUIRED)
    # ================================
    - stage: Release
      displayName: Release to Latest
      dependsOn: Build
      condition: succeeded()
      jobs:
        - deployment: ReleaseToLatest
          displayName: Promote to Latest Tag
          pool:
            name: 1ES-ABTT-Shared-Pool
            image: abtt-windows-2022
            os: windows
          environment: 'npm-production'  # Requires manual approval
          strategy:
            runOnce:
              deploy:
                steps:
                  - checkout: self
                    clean: true
                
                  - task: NodeTool@0
                    displayName: Use Node 16
                    inputs:
                      versionSpec: "16.15.1"
                  
                  # - script: echo '//registry.npmjs.org/:_authToken=$(npm-automation.token)' > .npmrc
                  #   displayName: 'Setup npm authentication'
                  
                  - script: |
                      echo "Setting up npm authentication for private registry..."
                      set NPM_TOKEN=$(npm-automation.token)
                      echo registry=https://pkgs.dev.azure.com/dassayantan/dassayantan/_packaging/TestPackages/npm/registry/ > .npmrc
                      echo always-auth=true >> .npmrc
                      echo //pkgs.dev.azure.com/dassayantan/dassayantan/_packaging/TestPackages/npm/registry/:_authToken=%NPM_TOKEN% >> .npmrc
                    displayName: 'Create .npmrc with registry'
                    env:
                      NPM_TOKEN: $(npm-automation.token)
                  
                  - pwsh: |
                      # Get package name and version from package.json
                      $packageInfo = Get-Content "package.json" | ConvertFrom-Json
                      $packageName = $packageInfo.name
                      $packageVersion = $packageInfo.version
                      Write-Host "Package: $packageName@$packageVersion"
                      
                      # Store for next steps
                      Write-Host "##vso[task.setvariable variable=packageName]$packageName"
                      Write-Host "##vso[task.setvariable variable=packageVersion]$packageVersion"
                      Write-Host "##vso[task.setvariable variable=packageIdentifier]$packageName@$packageVersion"
                    displayName: 'Get package information'
                  
                  - script: |
                      echo "Debug: Contents of .npmrc:"
                      if exist .npmrc (type .npmrc) else (echo .npmrc does not exist)
                      echo "npm config list:"
                      npm config list
                    displayName: 'Debug npm configuration for release'
                  
                  - script: npm dist-tag add "$(packageIdentifier)" latest --registry https://pkgs.dev.azure.com/dassayantan/dassayantan/_packaging/TestPackages/npm/registry/
                    displayName: 'Promote package to latest'
                    env:
                      NPM_TOKEN: $(npm-automation.token)
                    continueOnError: true
                  
                  - pwsh: |
                      if ($LASTEXITCODE -ne 0) {
                          Write-Host "##vso[task.logissue type=error]Failed to promote package to latest"
                          exit 1
                      } else {
                          Write-Host "Successfully promoted $(packageIdentifier) to latest"
                      }
                    displayName: 'Check promotion status'
                  
                  - script: npm dist-tag rm "$(packageIdentifier)" prerelease --registry https://pkgs.dev.azure.com/dassayantan/dassayantan/_packaging/TestPackages/npm/registry/
                    displayName: 'Remove prerelease tag'
                    env:
                      NPM_TOKEN: $(npm-automation.token)
                    continueOnError: true
                  
                  - pwsh: |
                      if ($LASTEXITCODE -ne 0) {
                          Write-Host "##vso[task.logissue type=warning]Failed to remove prerelease tag, but package is now latest"
                      } else {
                          Write-Host "Successfully removed prerelease tag from $(packageIdentifier)"
                      }
                    displayName: 'Check prerelease removal status'
                  
                  - script: del .npmrc
                    displayName: 'Cleanup npm authentication'
                    condition: always()
