# Release pipeline for azure-pipelines-tool-lib
# Stage 1: Publish as prerelease (automated)
# Stage 2: Promote to latest (manual approval required)
#
# Currently configured for public npm registry

trigger: none  # Manual trigger only

variables:
- group: npm-tokens

resources:
  repositories:
  - repository: 1ESPipelineTemplates
    type: git
    name: 1ESPipelineTemplates/1ESPipelineTemplates
    ref: refs/tags/release

extends:
  template: v1/1ES.Official.PipelineTemplate.yml@1ESPipelineTemplates
  parameters:
    featureFlags:
      autoBaseline: false
    sdl:
      baseline:
        baselineSet: default
        baselineFile: $(Build.SourcesDirectory)/.gdn/.gdnbaselines
      sourceAnalysisPool:
        name: 1ES-ABTT-Shared-Pool
        image: abtt-windows-2022
        os: windows
    customBuildTags:
    - ES365AIMigrationTooling-Release
    
    stages:
    # Stage 1: Build and publish prerelease
    - stage: Build
      displayName: Build and Prerelease
      jobs:
      - job: build
        displayName: Build and Publish Prerelease
        pool:
          name: 1ES-ABTT-Shared-Pool
          image: abtt-windows-2022
          os: windows
        templateContext:
          outputs:
          - output: pipelineArtifact
            displayName: 'Publish azure-pipelines-tool-lib package to pipeline artifacts'
            targetPath: '$(Build.ArtifactStagingDirectory)'
            artifactType: 'pipeline'
            artifactName: 'azure-pipelines-tool-lib-package'
        steps:
        - template: /.azure-pipelines/common-steps.yml@self
          parameters:
            includePackaging: 'true'
        
        - ${{ if eq(variables['build.reason'], 'Manual') }}:
          - bash: |
              echo "Setting up npm authentication for public registry..."
              export NPM_TOKEN=$(npm-automation.token)
              echo registry=https://registry.npmjs.org/ > .npmrc
              echo always-auth=true >> .npmrc
              echo //registry.npmjs.org/:_authToken=$NPM_TOKEN >> .npmrc
              
              # To test with private registry use: npm publish --registry https://xyz.private.registry.com/ --ignore-scripts --tag prerelease
              npm publish --ignore-scripts --tag prerelease
              exit_status=$?
              if [ $exit_status -eq 1 ]; then
                  echo "##vso[task.logissue type=warning]Publishing azure-pipelines-tool-lib was unsuccessful"
                  echo "##vso[task.complete result=SucceededWithIssues;]"
              fi
              
              rm .npmrc
            displayName: 'Publish to npm as prerelease'
            env:
              NPM_TOKEN: $(npm-automation.token)

    # Stage 2: Promote to latest (manual approval required)
    - stage: Release
      displayName: Release to Latest
      dependsOn: Build
      condition: succeeded()
      jobs:
        - deployment: ReleaseToLatest
          displayName: Promote to Latest Tag
          pool:
            name: 1ES-ABTT-Shared-Pool
            image: abtt-windows-2022
            os: windows
          environment: 'npm-production'
          strategy:
            runOnce:
              deploy:
                steps:
                  - checkout: self
                    clean: true
                
                  - task: NodeTool@0
                    displayName: Use Node 16
                    inputs:
                      versionSpec: "16.15.1"
                  
                  - script: |
                      echo "Setting up npm authentication for public registry..."
                      set NPM_TOKEN=$(npm-automation.token)
                      echo registry=https://registry.npmjs.org/ > .npmrc
                      echo always-auth=true >> .npmrc
                      echo //registry.npmjs.org/:_authToken=%NPM_TOKEN% >> .npmrc
                    displayName: 'Create .npmrc with registry'
                    env:
                      NPM_TOKEN: $(npm-automation.token)
                  
                  - pwsh: |
                      $packageInfo = Get-Content "package.json" | ConvertFrom-Json
                      $packageName = $packageInfo.name
                      $packageVersion = $packageInfo.version
                      Write-Host "Package: $packageName@$packageVersion"
                      
                      Write-Host "##vso[task.setvariable variable=packageName]$packageName"
                      Write-Host "##vso[task.setvariable variable=packageVersion]$packageVersion"
                      Write-Host "##vso[task.setvariable variable=packageIdentifier]$packageName@$packageVersion"
                    displayName: 'Get package information'
                  
                  - bash: |
                      export NPM_TOKEN=$(npm-automation.token)
                      
                      # To test with private registry use: npm dist-tag add "$(packageIdentifier)" latest --registry https://xyz.private.registry.com/
                      npm dist-tag add "$(packageIdentifier)" latest
                      exit_status=$?
                      if [ $exit_status -ne 0 ]; then
                          echo "##vso[task.logissue type=error]Failed to promote package to latest"
                          exit 1
                      else
                          echo "Successfully promoted $(packageIdentifier) to latest"
                      fi
                    displayName: 'Promote package to latest'
                    env:
                      NPM_TOKEN: $(npm-automation.token)
                  
                  - bash: |
                      export NPM_TOKEN=$(npm-automation.token)
                      
                      # To test with private registry use: npm dist-tag rm "$(packageIdentifier)" prerelease --registry https://xyz.private.registry.com/
                      npm dist-tag rm "$(packageIdentifier)" prerelease
                      exit_status=$?
                      if [ $exit_status -ne 0 ]; then
                          echo "##vso[task.logissue type=warning]Failed to remove prerelease tag, but package is now latest"
                      else
                          echo "Successfully removed prerelease tag from $(packageIdentifier)"
                      fi
                    displayName: 'Remove prerelease tag'
                    env:
                      NPM_TOKEN: $(npm-automation.token)
                  
                  - script: del .npmrc
                    displayName: 'Cleanup npm authentication'
                    condition: always()
